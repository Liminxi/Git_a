<?xml version="1.0" encoding="UTF-8"?>

	<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 为这个mapper指定一个唯一的namespace,namespace的值习惯上设置成包名+sql映射文件名,这样就能够保证namespace的值是唯一的 -->
<!-- <mapper namespace="com.yr.entry.mapper.userMapper"> xml的實現時使用 -->	<!-- 在select标签中编写查询的SQL语句, 设置select标签的id属性为getUser,id属性值必须是唯一的,不能够重复 
使用parameterType属性指明查询时使用的参数类型,resultType属性指明查询返回的结果集类型 
		resultType="com.yr.bean.User"就表示将查询结果封装成一个User类的对象返回 User类就是users表所对应的实体类 -->
	
	<mapper namespace="com.yr.entry.UserMapper">
	<!-- 
		通过别名对应到实体的属性中 
		flushCache="true"表示清空一级缓存 
		useCache=”false” 表示不使用用户缓存 
	-->
	<!-- 开启二级缓存 -->
<!-- 	eviction="FIFO"回收策略为先进先出,flushInterval="60000" 自动刷新时间60s,size="512" 最多缓存512个引用对象,readOnly="true" 只读-->
<cache eviction="FIFO" flushInterval="60000" size="512" readOnly="true"/>
<!-- 根据id查询得到一个user对象 -->
	<select id="getUserList" parameterType="int" resultType="_users">
		select *
		from users
	</select>

	<select id="getUser" parameterType="int" resultType="_users">
		select *
		from users where id=#{id}
	</select>
	<!-- 添加 -->
	<insert id="addUser" parameterType="_users">
		insert into users(name,account,pd,age,sex,tel,email,addr)values(#{name},#{account},#{pd},#{age},#{sex},#{tel},#{email},#{addr})
	</insert>

<!-- 	修改
 -->	<update id="updateUser" parameterType="">
		update users set name=#{name},account=#{account},pd=#{pd},age=#{age},sex=#{sex},tel=#{tel},email=#{email},addr=#{addr} where id=#{id}
	</update>

<!-- 	删除
 -->	<delete id="delUser" parameterType="int">
		delete from users where id =#{id}
	</delete>
</mapper>